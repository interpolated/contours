import * as clipperLib from 'js-angusj-clipper/web';
declare global {
    interface Window {
        clipper: clipperLib.ClipperLibWrapper;
    }
    interface self {
        clipper: clipperLib.ClipperLibWrapper;
    }
}
export interface IPoint {
    x: number;
    y: number;
}
export interface ILine {
    point0: IPoint;
    point1: IPoint;
    offset: number;
}
export interface IApartmentUserInput {
    depth: number;
    leftDepth: number;
    rightDepth: number;
    leftDepthPattern?: number[];
    rightDepthPattern?: number[];
    startDepth: number;
    endDepth: number;
}
export interface IApartmentPath extends IApartmentUserInput {
    id: string;
    points: IPoint[];
}
export interface ISegmentOffset {
    beginOffset: number;
    endOffset: number;
}
export interface ISegment extends ISegmentOffset {
    id: number;
    points: IPoint[];
    index: number;
    isLeft?: boolean;
    isCap?: boolean;
    area?: number;
    color?: string;
    sortIndex?: number;
    adjacencies?: number[];
    isSliceAble?: boolean;
    isInside?: boolean;
    isCorner?: boolean;
    match?: number;
    isFlipped?: boolean;
}
export interface IDwelling {
    key: string;
    area: number;
    mix: number;
}
export interface IPatterns {
    areaPattern: number[];
    indexPattern: number[];
    cornerPattern: number[];
    endcapPattern: number[];
}
export interface IAreaAndIndex {
    area: number;
    index: number;
}
export interface IApartmentPosition {
    segmentIndex: number;
    offset: number;
}
export interface IApartment {
    dwellingKey: string;
    begin: IApartmentPosition;
    end: IApartmentPosition;
    isCorner?: boolean;
    isInside?: boolean;
    area?: number;
    points: IPoint[];
}
export interface IApartmentCalcResult {
    points: IPoint[];
    apartments: IApartment[];
    segments: ISegment[];
    leftDepthPattern: number[];
    rightDepthPattern: number[];
}
export declare enum DepthHandlePosition {
    START = "START",
    END = "END",
    LEFT = "LEFT",
    RIGHT = "RIGHT"
}
