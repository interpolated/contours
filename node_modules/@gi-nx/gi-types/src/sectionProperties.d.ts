import { RawSection, StackedSection } from '.';
export declare enum MarkerKind {
    Text = "text",
    Icon = "icon",
    Label = "label"
}
export type Marker = {
    kind: MarkerKind.Text;
    value: TextMarker;
} | {
    kind: MarkerKind.Icon;
    value: IconMarker;
} | {
    kind: MarkerKind.Label;
    value: LabelMarker;
};
export type BaseMarker = {
    scale: number;
    onTop: boolean;
    renderMode: 'screen' | 'world';
    stick: boolean;
    stickHeight: number;
    anchor: 'center' | 'bottom';
    subtitle?: Subtitle;
    position?: 'start' | 'end' | 'center';
};
export type TextMarker = BaseMarker & {
    shape: 'circle' | 'square';
    backgroundColor: string;
    borderColor: string;
    shapeSize: number;
    borderWidth: number;
    text: string;
    textSize: number;
};
export type IconMarker = BaseMarker & {
    spriteUrl: string;
    spriteSize: number;
};
export type LabelMarker = BaseMarker & {
    text: string;
    textSize: number;
    textColor: string;
};
export type Subtitle = {
    scale: number;
    subtitle: string;
    subtitleSize: number;
    subtitleColor: string;
};
export type RawHTML = string;
export type Popup = {
    content: Record<string, any>;
    contentSize: number;
    padding: number;
    borderRadius: number;
    backgroundColor: string;
    borderColor: string;
    borderWidth: number;
};
export type StackedSectionWithMarker = StackedSection & {
    properties: StackedSection['properties'] & {
        marker: Marker;
    };
};
export type SectionWithPopup = RawSection & {
    properties: RawSection['properties'] & {
        popup: Popup;
    };
};
export declare function isStackedSectionWithMarker(obj: any): obj is StackedSectionWithMarker;
export declare function isSectionWithPopup(obj: any): obj is SectionWithPopup;
