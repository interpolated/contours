"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertNever = exports.isPointSection = exports.isLineStringSection = exports.isPolySection = exports.isValuelessOperator = exports.isSimplePropertyFilter = exports.isFileFilter = exports.isBooleanFilter = exports.isDateFilter = exports.isSelectFilter = exports.isTextFilter = exports.isNumberFilter = exports.isPermanentProject = exports.getEnumValues = exports.getEnumKeys = void 0;
const filtering_1 = require("./filtering");
function getEnumKeys(obj) {
    return Object.keys(obj).filter(k => Number.isNaN(+k));
}
exports.getEnumKeys = getEnumKeys;
function getEnumValues(obj) {
    return Object.values(obj).filter(v => Number.isNaN(+v));
}
exports.getEnumValues = getEnumValues;
const ephemeralSet = new Set(['scratchpad', 'viewonly']);
/**
 * typeguard for operations that should only be upon a valid, saved project
 */
const isPermanentProject = (projectId) => !ephemeralSet.has(projectId);
exports.isPermanentProject = isPermanentProject;
// type narrowing for properties
const isNumberFilter = (def) => def.type === 'number';
exports.isNumberFilter = isNumberFilter;
const isTextFilter = (def) => def.type === 'string' || def.type === 'textArea';
exports.isTextFilter = isTextFilter;
const isSelectFilter = (def) => def.type === 'select';
exports.isSelectFilter = isSelectFilter;
const isDateFilter = (def) => def.type === 'date';
exports.isDateFilter = isDateFilter;
const isBooleanFilter = (def) => def.type === 'boolean';
exports.isBooleanFilter = isBooleanFilter;
const isFileFilter = (def) => def.type === 'file';
exports.isFileFilter = isFileFilter;
const isSimplePropertyFilter = (filter) => 'property' in filter;
exports.isSimplePropertyFilter = isSimplePropertyFilter;
const isValuelessOperator = (operator) => [filtering_1.SimpleOperator.Empty, filtering_1.SimpleOperator.NotEmpty].includes(operator);
exports.isValuelessOperator = isValuelessOperator;
const isPolySection = (section) => section.geometry.type === 'Polygon';
exports.isPolySection = isPolySection;
const isLineStringSection = (section) => section.geometry.type === 'LineString';
exports.isLineStringSection = isLineStringSection;
const isPointSection = (section) => section.geometry.type === 'Point';
exports.isPointSection = isPointSection;
const assertNever = (x) => {
    throw new Error('Unexpected value: ' + x);
};
exports.assertNever = assertNever;
//# sourceMappingURL=utils.js.map