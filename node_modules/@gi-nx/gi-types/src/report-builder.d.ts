import type { JSONContent } from '@tiptap/react';
/**
 * subset from css spec
 *
 * https://w3c.github.io/csswg-drafts/css-page/#typedef-page-size-page-size
 */
export type SupportedPageSize = 'A4' | 'A3' | 'letter' | 'legal';
export type PageOrientation = 'portrait' | 'landscape';
/**
 * conforms to css spec for two-value syntax
 *
 * https://developer.mozilla.org/en-US/docs/Web/CSS/@page/size
 */
export type PageDimensions = `${SupportedPageSize} ${PageOrientation}`;
export type AutoSiteMiniMapSubgroup = {
    type: 'mini-map';
    /**
     * @example
     * "id-autogenerated"
     */
    id: string;
    label?: string;
    /**
     * which layer(s) does this property correspond to in order to generate vista (if any)
     *
     * @example
     * ['123', '27']
     */
    layers: {
        id: string;
        name?: string;
        includeLegend?: boolean;
    }[];
    /**
     * ordered list of properties to render in table beside map
     */
    properties: {
        key: string;
        label?: string;
    }[];
    /**
     * whether the subgroup should render a comment box below the properties.
     */
    comments?: boolean;
    /**
     * How much padding to add around the site boundaries when generating the site screenshot.
     */
    padding?: number | string;
};
export type AutoSiteSubGroup = AutoSiteMiniMapSubgroup;
export type AutoSiteGroup = {
    /**
     * @example
     * "gen-info-id-autogenerated"
     */
    id: string;
    /**
     * @example
     * "General Information"
     */
    label: string;
    subGroups: AutoSiteSubGroup[];
};
/**
 * data and type definitions that drive the appearance and layout of automatically-generated report pages.
 *
 * These pages display the data attached to a particular Giraffe section.
 *
 * Works with sections that represent a single site, i.e. Regrid, LandIQ Site Search.
 */
export type AutoSiteConfig = {
    id: string;
    name: string;
    dateUpdated: string;
    /**
     * the layer(s) that should be used to display the surrounding parcels as context for each section
     */
    parcelLayers: {
        id: string;
    }[];
    /**
     * e.g. regrid is all under `properties.regrid`, landIq is all under `properties.landIq`
     */
    nestedPropKey: string | null;
    pageTitleKey: string;
    groups: AutoSiteGroup[];
    suggestedProperties?: string[];
    /**
     * Whether to style the outputted data in rows (of two) or columns (of three) subgroups (per group) per page.
     */
    layout?: 'rows' | 'columns';
    groupStyle?: {
        textAlign?: 'left' | 'center';
        bg?: string;
        color?: string;
        padding?: number;
    };
    subgroupStyle?: {
        textAlign?: 'left' | 'center';
        bg?: string;
        color?: string;
        padding?: number;
    };
};
export type BuilderData = {
    autoSiteConfigs: Record<string, AutoSiteConfig>;
    reports: Record<string, BuilderTemplate>;
};
type BuilderPageCommon = {
    description?: string;
    bg: string | null;
    layout: BuilderRow[];
};
export type BasicPage = BuilderPageCommon;
export type BuilderPage = BasicPage;
export type BuilderTemplate = {
    id: string;
    pages: BuilderPage[];
    name: string;
    logo?: string;
    pageDimensions: PageDimensions;
    gap: number | {
        row: number;
        column: number;
    };
    margin: number | {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    dateCreated?: string;
    dateUpdated?: string;
};
export type BuilderRow = {
    relativeHeight: number | 'auto';
    columns: BuilderColumn[];
};
export interface BuilderColumn {
    relativeWidth: number;
    /**
     * arranged vertically within space
     */
    slots: (BuilderSlot | null)[];
    /**
     * Defines the column children layout. Defaults to 'auto' if unset.
     * Auto will add even spacing between children. Condensed will let children take up their minimum space.
     */
    layout?: 'auto' | 'condensed';
}
export type DisplayInCategorySlot = {
    type: 'display-in-category';
    category: string;
    /**
     * null forces table to be displayed
     *
     * TODO if we save id to a display, we can use that instead (and not lose the display if the user changes the order)
     */
    displayIndex: number | null;
    splitByLayer: boolean;
    layers: string[] | null;
};
export type RichTextSlot = {
    type: 'rich-text';
    content?: JSONContent;
};
export type ViewEmbedSlot = {
    type: 'view-embed';
    id: string | null;
    textFirst?: boolean;
    orientation?: 'horizontal' | 'vertical' | 'auto';
    objectFit?: 'cover' | 'contain';
    include?: {
        image?: boolean;
        description?: boolean;
    };
};
export type ImageSlot = {
    type: 'image';
    src: string;
    caption?: string;
    objectFit?: 'cover' | 'contain';
};
export type SlotConfig = DisplayInCategorySlot | ViewEmbedSlot | RichTextSlot | ImageSlot;
export type BuilderSlot = {
    id: string;
    title: string | null;
    description: string;
    config: SlotConfig;
    bg: string | null;
    color?: string | null;
    textAlign?: 'left' | 'center';
    padding?: number | null;
    width?: number;
    height?: number;
};
export type BuilderSlotProps<Slot extends SlotConfig = SlotConfig> = {
    width: number;
    height: number;
    relativeWidth: number;
    relativeHeight: number;
    config: Slot;
    bg: string | null;
    /**
     * `null` to force hide
     *
     * `'' | undefined` falls back to slot-defined title (if any)
     */
    title?: string | null;
    setConfig: (config: SlotConfig | undefined | null) => void;
    deleteSlot?: () => void;
    pageIndex: number;
};
/**
 * height and width in mm
 */
export type BuilderSlotViewerProps<Slot extends SlotConfig = SlotConfig> = Pick<BuilderSlotProps<Slot>, 'width' | 'height' | 'config' | 'title' | 'pageIndex'> & {
    explicitTitle: string | undefined | null;
    color?: string | null;
    padding?: number | null;
    textAlign?: 'left' | 'center';
};
export type BuilderSlotEditorProps<Slot extends SlotConfig = SlotConfig> = Pick<BuilderSlotProps, 'setConfig' | 'width' | 'height' | 'pageIndex'> & {
    config: Slot | null;
    explicitTitle: string | undefined | null;
    color?: string | null;
    padding?: number | null;
    textAlign?: 'left' | 'center';
};
export type GetSlotTitleFunc<Slot extends SlotConfig = SlotConfig> = (props: {
    config: Slot;
    explicitTitle?: string | null;
}) => string | null;
export {};
