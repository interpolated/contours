import { PropertyPath } from 'lodash';
import { FileTypeSubstring } from './files';
import { ProjectUnits, UserDefinedWorkspaceProperty } from './projects';
export type OrderedObject = Array<{
    key: string;
    value: number;
}>;
export type PropDimension = -3 | -2 | -1 | 1 | 2 | 3;
export type PropNumberGetterSetter = (value: number, units: ProjectUnits, dimension?: PropDimension) => number | undefined;
export interface BaseGroupProps {
    properties: Record<string, any>;
    setProp?: (path: PropertyPath, propVal: any, isFast?: boolean) => void;
    removeProp?: (path: PropertyPath) => void;
    setMany?: (pathVals: [path: PropertyPath, newProp: any][]) => void;
    units: ProjectUnits;
    showHeading?: boolean;
    context: 'usageTable' | 'featureProperties' | 'usageForm';
    allowFastUpdates?: boolean;
}
export interface EditorGroupProps extends BaseGroupProps {
    setProp?: (path: PropertyPath, propVal: any, isFast?: boolean) => void;
    setMany?: (pathVals: [path: PropertyPath, newProp: any][], isFast?: boolean) => void;
    removeMany?: (paths: PropertyPath[]) => void;
}
export interface TypedPropertyCommon {
    name: string;
    /**
     * in case the label should be formatted/spelt differently. probably used internally as users will just name the
     * property with a label-like string anyway.
     *
     * also helpful for regrid when props are hoisted with specific names
     */
    label?: string;
    /**
     * for help text etc to explain more info about the property
     */
    description?: string;
    /**
     * false to lock the property from being edited.
     */
    editable?: boolean;
    matches?: number;
}
export interface TypedPropertyOrderedObject extends TypedPropertyCommon {
    type: 'orderedObject';
    defaultValue: OrderedObject;
    required: false;
    dimension?: PropDimension;
    min?: number;
    max?: number;
    step?: number;
    suffix?: string;
    prefix?: string;
    precision?: number;
}
export interface TypedPropertyNumberArray extends TypedPropertyCommon {
    type: 'numberArray';
    defaultValue: number[];
    required: false;
}
export interface TypedPropertySelect extends TypedPropertyCommon {
    type: 'select';
    options: Array<{
        value: string;
        label: string;
    }> | Array<string>;
    required: boolean;
    defaultValue: string;
}
export interface TypedPropertyBoolean extends TypedPropertyCommon {
    type: 'boolean';
    defaultValue: boolean;
    /**
     * must not be required so that the toggle can be off
     */
    required: false;
}
/**
 * @deprecated
 */
export interface TypedPropertyFile extends TypedPropertyCommon {
    type: 'file';
    defaultValue: string;
    required: boolean;
    fileFormats?: FileTypeSubstring[];
}
export interface TypedPropertyNumber extends TypedPropertyCommon {
    type: 'number';
    defaultValue: number;
    required: boolean;
    prefix?: string;
    suffix?: string;
    /**
     * NB: this is applied to the input field ui.
     * so it is the minimum of the value BEFORE any setter is applied to persist the value.
     */
    min?: number;
    /**
     * NB: this is applied to the input field ui.
     * so, it is the maximum of the value BEFORE any setter is applied to persist the value.
     *
     * e.g., for efficiency, the max should be 100 rather than 1.
     */
    max?: number;
    /**
     * number of decimal places to round to before saving.
     *
     * NB: this is applied BEFORE any setter has been applied.
     *
     * e.g., for efficiency, the precision is applied to percentage value, before conversion to the decimal persisted value
     *
     * @default undefined // returns as user has inputted it
     *
     */
    precision?: number;
    /**
     * applied to number stepper in input ui.
     * so, it is the step between values BEFORE any setter is applied to persist the value.
     *
     * e.g., for efficiency, step should be 1 rather than 0.01 to move from 70% -> 71%
     *
     *
     * @default 1
     */
    step?: number;
    /**
     * in case saved value differs from user's input, it can be transformed here prior to saving
     *
     * @default
     * value => value
     */
    set?: (value: number, units: ProjectUnits, dimension?: PropDimension) => number;
    /**
     * in case value displayed to user differs from that saved, it can be transformed here prior to displaying
     *
     * @default
     * value => value
     */
    get?: (value: number, units: ProjectUnits, dimension?: PropDimension) => number;
    /**
     * todo: reconcile getter, setter, and dimension
     */
    dimension?: PropDimension;
}
export interface TypedPropertyTextual extends TypedPropertyCommon {
    type: 'string' | 'textArea';
    options?: Array<{
        value: string;
        label: string;
    }> | Array<string>;
    /**
     * for example to read project properties and output to string
     */
    allowInterpolation?: boolean;
    defaultValue: string;
    required: boolean;
}
export interface TypedPropertyHidden extends TypedPropertyCommon {
    type: 'hidden';
    required: false;
    defaultValue: any;
}
export interface TypedPropertyHTML extends TypedPropertyCommon {
    type: 'html';
    /**
     * giraffe-speak expression allowed {{geometry.coordinates[0,0]}}
     */
    defaultValue: string;
    required: boolean;
}
export interface TypedPropertyColor extends TypedPropertyCommon {
    type: 'color';
    defaultValue: string;
    required: boolean;
}
export interface TypedPropertyDate extends TypedPropertyCommon {
    type: 'date';
    defaultValue: string;
    required: boolean;
}
export interface TypedPropertyCustomObject extends TypedPropertyCommon {
    type: 'customObject';
    defaultValue: string;
    required: boolean;
}
type UnionKeys<T> = T extends T ? keyof T : never;
type StrictUnionHelper<T, TAll> = T extends any ? T & Partial<Record<Exclude<UnionKeys<TAll>, keyof T>, undefined>> : never;
export type StrictUnion<T> = StrictUnionHelper<T, T>;
export type GiraffeSystemProperty = Omit<StrictUnion<TypedPropertySelect | TypedPropertyHTML | TypedPropertyBoolean | TypedPropertyNumber | TypedPropertyFile | TypedPropertyOrderedObject | TypedPropertyTextual | TypedPropertyNumberArray | TypedPropertyHidden | TypedPropertyCustomObject | TypedPropertyDate | TypedPropertyColor>, 'editable' | 'required'> & {
    customRender?: true;
    category?: 'visual';
};
export type LensTypedProperty = StrictUnion<TypedPropertySelect | TypedPropertyBoolean | TypedPropertyNumber | TypedPropertyTextual | TypedPropertyDate | TypedPropertyColor>;
export type UserDefinedFeatureProperty = StrictUnion<TypedPropertySelect | TypedPropertyBoolean | TypedPropertyNumber | TypedPropertyTextual>;
export type PropertyOption = {
    label: string;
    value: string;
};
export type PropertyFilter = {
    mapPropsToOptions: (propValues: string[]) => PropertyOption[];
    columnKeys: string[];
    sortKeys: string[];
    allKeys: string[];
    getOption: (propKey: string) => PropertyOption | null;
};
export type AnySortOfDefinedProperty = LensTypedProperty | GiraffeSystemProperty | UserDefinedFeatureProperty | UserDefinedWorkspaceProperty;
export type TypedPropertyWithDefinedFlag = AnySortOfDefinedProperty & {
    defined: boolean;
};
export {};
