import { MiniIframeRPC } from '@gi-nx/mini-iframe-rpc';
import { AnyLayer, Sources } from 'mapbox-gl';
import type { FeatureId, GeoCoordinate, GiraffeProjectApp, LayerTree, Lensable, OtherProjectApp, Project, ProjectLayer, RawSection, StackedSection } from '@gi-nx/gi-types';
import { FeatureCollection } from 'geojson';
export type GiraffeStateEventKey = 'selected' | 'mapSelectCoord' | 'mapView' | 'mapContent' | 'projects' | 'bakedSections' | 'projectLayers' | 'rawSections' | 'projectOrigin' | 'project' | 'projectAppsByAppID' | 'layerTree' | 'selectedProjectApp';
export type GiraffeFeature = RawSection | StackedSection | Project;
export type MapView = {
    bounds: [[number, number], [number, number]];
    zoom: number;
    center: [number, number];
};
export type MapContent = {
    layers: AnyLayer[];
    sources: Sources;
};
export interface GiraffeStateAttr {
    selected?: Lensable[];
    mapView?: MapView;
    mapContent?: MapContent;
    projects?: Record<string, Project>;
    bakedSections?: Record<FeatureId, StackedSection[]>;
    projectLayers?: ProjectLayer[];
    rawSections?: Record<FeatureId, RawSection>;
    project?: Project;
    projectOrigin?: GeoCoordinate | null;
    projectAppsByAppID?: {
        '1'?: GiraffeProjectApp;
    } & Record<string, OtherProjectApp>;
    layerTree?: LayerTree;
    selectedProjectApp?: OtherProjectApp | GiraffeProjectApp;
}
export interface GiraffeStateGet extends Omit<GiraffeStateAttr, 'rawSections' | 'bakedSections' | 'projects' | 'selected'> {
    projects?: FeatureCollection<Project['geometry'], Project['properties']>;
    rawSections?: FeatureCollection<RawSection['geometry'], RawSection['properties']>;
    bakedSections?: FeatureCollection<StackedSection['geometry'], StackedSection['properties']>;
    selected?: FeatureCollection;
}
export type GiraffeStateEvent = {
    type: GiraffeStateEventKey;
} & GiraffeStateAttr;
export declare class GiraffeState {
    constructor();
    attr: GiraffeStateAttr;
    get(key: 'selected'): GiraffeStateGet['selected'];
    get(key: 'mapView'): GiraffeStateGet['mapView'];
    get(key: 'mapContent'): GiraffeStateGet['mapContent'];
    get(key: 'projects'): GiraffeStateGet['projects'];
    get(key: 'bakedSections'): GiraffeStateGet['bakedSections'];
    get(key: 'projectLayers'): GiraffeStateGet['projectLayers'];
    get(key: 'rawSections'): GiraffeStateGet['rawSections'];
    get(key: 'project'): GiraffeStateGet['project'];
    get(key: 'projectOrigin'): GiraffeStateGet['projectOrigin'];
    get(key: 'projectAppsByAppID'): GiraffeStateGet['projectAppsByAppID'];
    get(key: 'layerTree'): GiraffeStateGet['layerTree'];
    get(key: 'selectedProjectApp'): GiraffeStateGet['selectedProjectApp'];
    get(key: GiraffeStateEventKey): any;
    listeners: Record<string, any>;
    set(key: any, value: any, event: any): void;
    addListener(keys: GiraffeStateEventKey[], listener: (key: GiraffeStateEventKey, event: MessageEvent) => void): string;
    removeListener(listenerKey: any): void;
    removeAllListeners(): void;
    listen(): void;
}
export declare const giraffeState: GiraffeState;
export declare const rpc: MiniIframeRPC;
