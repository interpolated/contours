import type { AnyLayer, AnySourceData, CircleLayer, FillExtrusionLayer, FillLayer, LineLayer, RasterLayer, SymbolLayer } from 'mapbox-gl';
import { UploadedFileDetails } from './files';
import { GeoJsonFeature, GiMapboxGeoJsonFeature } from './general';
import { VectorLayerLens } from './kanbans';
import { Project } from './projects';
import { TreeData, TreeItem } from './tree';
export type LayerAppOwner = `${number}:` | '-';
export declare const layerPurposes: readonly ["GIRDRW", "GIRAPP", "GIRPLA", "GIRSPE", "GIRMAR", "GILENS", "GIRTMP", "GIRTER"];
export type LayerPurpose = (typeof layerPurposes)[number];
export type LayerKey = `${LayerAppOwner}${string}` | string;
export type GiMapboxLayerType = AnyLayer['type'] | 'three-Roads' | 'three';
export type FullLayerId = `${LayerPurpose}${LayerKey}-${GiMapboxLayerType}` | string;
type RasterExtra = {
    _legendURL?: string;
};
/** any of https://docs.mapbox.com/mapbox-gl-js/style-spec/layers/ */
export type MapboxStyleLayer = // | BackgroundLayer
(CircleLayer | FillExtrusionLayer | FillLayer | LineLayer | RasterLayer | SymbolLayer) & RasterExtra;
export type Gi3DSourceData = {
    type: 'esri-sceneserver' | '3d-tiles' | 'giraffe-baked';
    url: string;
    headers?: Record<string, string>;
    cesium?: Record<string, any>;
};
export type GiSourceData = Gi3DSourceData | AnySourceData | {
    type: 'giraffeModel';
};
export declare enum GiraffeLayerType {
    none = 0,
    VectorUpload = 1,
    FeatureServer = 2,
    MapboxTiles = 3,
    CesiumTiles = 4,
    SceneServer = 5,
    MapServer = 6,
    WMS = 7,
    XYZ = 8,
    Image = 9,
    ImageServer = 10
}
export interface Layer<S = MapboxStyleLayer | MapboxStyleLayer[]> {
    id: string;
    org: string | null;
    name: string;
    description: string;
    style: S | null;
    vector_style: VectorLayerLens | null;
    vector_source: GiSourceData | null;
    default_group: string;
    layer_type: GiraffeLayerType;
    priority?: number;
    boundary?: {
        geojson: string;
        wkid: number;
    };
    credentials?: {
        username?: string;
        password?: string;
        token?: string;
    };
    created_at: string;
    org_name: string | null;
    permissions: {
        userAccess: {
            id: number;
            user_email: string;
            layer: number;
            access_level: 'admin' | 'write' | 'read';
        }[];
        orgAccess: {
            id: number;
            org: number;
            layer: number;
            access_level: 'admin' | 'write' | 'read';
        }[];
        orgAdmin: boolean;
    };
}
export type LayerPost = Omit<Layer, 'id' | 'created_at' | 'org_name' | 'permissions'> & {
    file_uploads?: UploadedFileDetails[];
};
export type LayerPatch = Partial<LayerPost> & {
    id: string;
};
export interface LayerWithSpecificSource<S> extends Layer {
    style: MapboxStyleLayer & {
        source: S;
    };
}
export interface ProjectLayer {
    opacity: number;
    layer_full: Layer;
    layer: string;
    group: string;
    project: string;
    id: string;
    order?: number;
}
export type CreateProjectLayerInput = Omit<ProjectLayer, 'id'>;
export type LayerTree = TreeData<LayerTreeItem>;
export type LayerTreeItemBase<LensStyleType extends Record<never, any>> = TreeItem<{
    opacity?: number;
    locked?: boolean;
    enabled?: boolean;
    hideInTree?: boolean;
    vector_source?: GiSourceData | null;
    styleByLens?: boolean;
    style?: MapboxStyleLayer;
    name?: string;
} & LensStyleType>;
export declare type LayerTreeItemPortfolioLens = LayerTreeItemBase<{
    /**
     * if `kanbanId` is present, this layer is styled by the kanban style definition
     */
    kanbanId: string;
    orgId: string;
} | {
    /**
     * if `kanbanId` isn't present, this layer is styled by the kanban style definition
     */
    kanbanId: never;
    orgId: never;
}>;
export declare type LayerTreeItemVectorStyleLens = LayerTreeItemBase<{
    /**
     * TODO lens should be vector_style
     */
    lens: VectorLayerLens | null;
}>;
export declare type LayerTreeItemWithoutLens = LayerTreeItemBase<Record<never, never>>;
/**
 * identical to atlaskit tree item type, but we force string ids
 */
export declare type LayerTreeItem = LayerTreeItemPortfolioLens | LayerTreeItemVectorStyleLens | LayerTreeItemWithoutLens;
export type SourceAndStyle = [source: any, style: any];
export type Lensable = GiMapboxGeoJsonFeature | GeoJsonFeature | Project;
export interface LensUiState {
    layerId: FullLayerId | null;
    lockMap?: boolean;
    getColor?: (feature: Lensable) => string;
    onClick?: (uniqueFeatureBoundaries: GiMapboxGeoJsonFeature[], clusters: GiMapboxGeoJsonFeature[], previousSelection: Lensable[] | undefined, originalEvent: MouseEvent) => void;
    highlighted: Lensable | null;
    selected: Lensable[];
    isDefault: boolean;
}
export type MapboxTileErrorWithResponse = {
    message: string;
    status: number;
    url: string;
};
export type MapboxTileErrorNoResponse = {
    message: string;
};
export declare function isMapboxTileErrorWithResponse(err: MapboxTileErrorWithResponse | MapboxTileErrorNoResponse): err is MapboxTileErrorWithResponse;
export {};
