import { Position } from 'geojson';
import { ProjectOverrides } from './context';
import { ProjectAttachment, UploadedFileDetails } from './files';
import { GeoCoordinate, Vista } from './general';
import { OrgModelAccess, TeamModelAccess, UserModelAccess } from './model-access';
import { StrictUnion, TypedPropertyBoolean, TypedPropertyColor, TypedPropertyDate, TypedPropertyFile, TypedPropertyNumber, TypedPropertySelect, TypedPropertyTextual } from './properties';
export type UserDefinedWorkspaceProperty = StrictUnion<TypedPropertySelect | TypedPropertyBoolean | TypedPropertyNumber | TypedPropertyTextual | TypedPropertyDate | TypedPropertyColor | TypedPropertyFile>;
export type ProjectUnits = 'feet' | 'meters';
export type ProjectDetails = {
    first_vista: {
        details: Vista['details'];
        file_uploads: UploadedFileDetails[];
        name: string;
        project: number;
    };
    attachments: ProjectAttachment[];
} & Permissions;
export interface UserProjectDetails {
    id: number;
    user: number;
    project: number;
    as_template: boolean;
}
export interface TeamProjectDetails {
    id: number;
    team: number;
    project: number;
    as_template: boolean;
}
export interface OrgProjectDetails {
    id: number;
    org: number;
    project: number;
    as_template: boolean;
}
export type ProjectId = number | string | 'scratchpad' | 'viewonly';
export type Grid = {
    bearing: number;
    distance: number;
    origin: GeoCoordinate;
};
export type ProjectBoundary = {
    type: 'Feature';
    geometry: {
        type: 'Polygon';
        coordinates: GeoCoordinate[][] | Position[][];
    };
    properties: {
        id: string | number;
        name: string;
        created_at?: string;
        org_name?: string;
        org_id?: number;
        color?: string;
        grid?: Grid;
        crs?: string;
        siteArea?: number;
        defaultBoundary?: boolean;
        units?: ProjectUnits;
        acronymGross?: string;
        acronymNet?: string;
        acronymSaleable?: string;
        acronymFloorSpaceRatio?: string;
        currencySymbol?: string;
    } & Record<string, any>;
};
export interface NullProjectBoundary extends ProjectBoundary {
    geometry: undefined;
}
type Permissions = {
    userAccess: UserModelAccess[];
    teamAccess: TeamModelAccess[];
    orgAccess: OrgModelAccess[];
    orgAdmin: boolean;
};
export type Project = {
    _permissions: Permissions;
    _sharingDetails: {
        user: UserProjectDetails[];
        team: TeamProjectDetails[];
        org: OrgProjectDetails[];
    };
} & ProjectBoundary;
export type NewProjectInput = Omit<ProjectBoundary, 'properties'> & {
    properties: Omit<ProjectBoundary['properties'], 'id'>;
};
export type ProjectToSave = [
    project: Omit<ProjectBoundary, 'properties'> & {
        properties: Omit<ProjectBoundary['properties'], 'id'>;
    },
    overrides: ProjectOverrides,
    navCallback?: (id: string) => string
];
export {};
