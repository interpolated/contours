import { Feature, MultiPolygon, Polygon } from 'geojson';
export declare enum SimpleOperator {
    Is = "is",
    IsNot = "is_not",
    Empty = "is_empty",
    NotEmpty = "is_not_empty",
    Contains = "contains",
    NotContains = "does_not_contain",
    StartsWith = "starts_with",
    EndsWith = "ends_with",
    GreaterThan = "greater_than",
    GreaterThanEq = "greater_than_or_equal",
    LessThan = "less_than",
    LessThanEq = "less_than_or_equal"
}
export declare enum AdvancedOperator {
    And = "and",
    Or = "or"
}
type Is = SimpleOperator.Is;
type IsNot = SimpleOperator.IsNot;
type Empty = SimpleOperator.Empty;
type NotEmpty = SimpleOperator.NotEmpty;
type Contains = SimpleOperator.Contains;
type NotContains = SimpleOperator.NotContains;
type StartsWith = SimpleOperator.StartsWith;
type EndsWith = SimpleOperator.EndsWith;
type GreaterThan = SimpleOperator.GreaterThan;
type GreaterThanEq = SimpleOperator.GreaterThanEq;
type LessThan = SimpleOperator.LessThan;
type LessThanEq = SimpleOperator.LessThanEq;
export type ValuelessFilters = {
    operator: Empty | NotEmpty;
};
type StringFilters = {
    value: string | undefined;
    operator: Is | IsNot | Contains | NotContains | StartsWith | EndsWith;
};
type NumberFilters = {
    value: number | undefined;
    operator: Is | IsNot | GreaterThan | LessThan | GreaterThanEq | LessThanEq;
};
type StringArrayFilters = {
    value: string[] | undefined;
    operator: Is | IsNot;
};
type DateStringFilters = {
    value: string | undefined;
    operator: Is | IsNot | GreaterThan | LessThan | GreaterThanEq | LessThanEq;
};
type BooleanFilters = {
    /** @deprecated operator determines value. is===true, isNot===false */
    value: boolean | undefined;
    operator: Is | IsNot;
};
type GeometryFilters = {
    operator: 'include' | 'exclude';
    value: Feature<Polygon | MultiPolygon> | undefined;
};
export type NumberTypeFilter = {
    type: 'number';
} & (NumberFilters | ValuelessFilters);
export type TextTypeFilter = {
    type: 'string' | 'textArea';
} & (StringFilters | ValuelessFilters);
export type SelectTypeFilter = {
    type: 'select';
} & (StringArrayFilters | ValuelessFilters);
export type DateTypeFilter = {
    type: 'date';
} & (DateStringFilters | ValuelessFilters);
export type BooleanTypeFilter = {
    type: 'boolean';
} & (BooleanFilters | ValuelessFilters);
export type FileTypeFilter = {
    type: 'file';
} & ValuelessFilters;
export type GeometryTypeFilter = {
    type: 'geometry-filter';
} & GeometryFilters;
export type PropertyFilterDefinition = NumberTypeFilter | TextTypeFilter | SelectTypeFilter | DateTypeFilter | BooleanTypeFilter | FileTypeFilter;
export type FeatureFilterDefinition = PropertyFilterDefinition | GeometryTypeFilter;
export interface SimplePropertyFilter {
    property: string;
    filter: PropertyFilterDefinition;
}
export interface AdvancedPropertyFilter {
    operator: AdvancedOperator;
    filters: Array<SimplePropertyFilter | AdvancedPropertyFilter>;
}
export interface AdvancedFeatureFilter {
    operator: AdvancedOperator;
    filters: Array<SimplePropertyFilter | GeometryTypeFilter | AdvancedFeatureFilter>;
}
export {};
