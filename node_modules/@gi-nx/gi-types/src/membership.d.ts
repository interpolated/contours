import type { AccessLevel } from './model-access';
import { UserDefinedWorkspaceProperty } from './projects';
import { TreeData, TreeItem } from './tree';
export type License = 'Giraffe Creator' | 'Giraffe Viewer' | 'Free';
export type HubspotWorkType = 'Developer' | 'Broker' | 'Capital Partner' | 'Urban Planner' | 'Architect' | 'Engineer' | 'General Contractor' | 'Other';
export type HubspotGiraffeUseType = 'For work' | 'For personal use' | 'For education';
export type HubspotAppData = {
    name: string;
    workType: HubspotWorkType;
    purpose: HubspotGiraffeUseType;
    orgName: string;
    phone: string;
    newsletterOptIn: boolean;
    workEmail: string;
    demo_request?: string;
};
export interface User {
    id: number;
    name: string;
    email: string;
    phone: string;
    company: string;
    license: License;
    userorgs: UserOrg[];
    hubspot_props: Partial<HubspotAppData>;
}
export interface Team {
    id: number;
    name: string;
    org: number;
}
export interface Plan {
    name: string | null;
    product_id: string;
    quantity: number;
}
export interface UserOrg {
    id: number;
    user_email: string;
    org: string;
    org_name: string;
    access_level: AccessLevel;
    org_current_period_end: string;
}
export interface UserTeam {
    id: number;
    user_email: string;
    access_level: AccessLevel;
    team: number;
    team_name: string;
}
export interface Org {
    current_period_end: string;
    id: string;
    name: string;
    settings: WorkspaceDetails['settings'];
    properties: WorkspaceDetails['properties'];
}
export type WorkspacePropertyTree = TreeData<TreeItem<UserDefinedWorkspaceProperty>>;
export interface WorkspaceDetails {
    id: number;
    name: string;
    current_period_end: string;
    status: number;
    settings: Record<string, any> & {
        logo?: string;
        accentColor?: string;
    };
    properties: WorkspacePropertyTree;
    teams: Array<Team>;
    members: Array<UserOrg>;
    plans: Array<Plan>;
}
export interface Webhook {
    id: number;
    org: number;
    url: string;
    name: string;
    token: string;
}
export interface APIToken {
    id: number;
    org: number;
    token: string;
}
