"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rpc = exports.giraffeState = exports.GiraffeState = void 0;
const mini_iframe_rpc_1 = require("@gi-nx/mini-iframe-rpc");
const geoKeys = ['rawSections', 'bakedSections', 'projects', 'selected'];
function toGeoJSON(v) {
    // 'selected'
    if (Array.isArray(v))
        return { type: 'FeatureCollection', features: v };
    const features = [];
    // 'rawSections' | 'bakedSections' | 'projects'
    Object.values(v || {}).forEach(vs => {
        if (Array.isArray(vs)) {
            vs.forEach((v, vi) => {
                features.push({
                    type: 'Feature',
                    // @ts-ignore
                    geometry: v.geometry,
                    // @ts-ignore
                    properties: Object.assign(Object.assign({}, v.properties), { 
                        // @ts-ignore
                        id: `${v.properties.id}-${vi}` })
                });
            });
        }
        else {
            // @ts-ignore
            features.push(vs);
        }
    });
    return {
        type: 'FeatureCollection',
        features
    };
}
// store data on iframe sent by parent (Parent/index) eg projects, rawSections ...
class GiraffeState {
    constructor() {
        this.attr = {};
        this.listeners = {};
        this.listen();
    }
    get(key) {
        if (geoKeys.includes(key))
            return toGeoJSON(this.attr[key]);
        return this.attr[key];
    }
    set(key, value, event) {
        if (JSON.stringify(this.attr[key]) === JSON.stringify(value))
            return;
        this.attr[key] = value;
        Object.values(this.listeners).forEach(l => {
            if (l.keys.includes(key))
                l.listener(key, event);
        });
    }
    addListener(keys, listener) {
        const listenerKey = (Math.random() + 1).toString(36).substring(2); // nanoid();
        this.listeners[listenerKey] = {
            keys,
            listener
        };
        return listenerKey;
    }
    removeListener(listenerKey) {
        delete this.listeners[listenerKey];
    }
    removeAllListeners() {
        this.listeners = {};
    }
    listen() {
        window.addEventListener('message', event => {
            let data = undefined;
            try {
                if (!event.data)
                    return;
                if (event.data === '[object Object]')
                    return;
                data = JSON.parse(event.data);
                if (data === null || data === void 0 ? void 0 : data.type) {
                    this.set(data.type, data[data.type], event);
                }
            }
            catch (e) {
                console.log('error parsing message', e);
            }
        }, false);
    }
}
exports.GiraffeState = GiraffeState;
exports.giraffeState = new GiraffeState();
// used to call parent functions from iframe
exports.rpc = new mini_iframe_rpc_1.MiniIframeRPC();
//# sourceMappingURL=iframe-sdk.js.map