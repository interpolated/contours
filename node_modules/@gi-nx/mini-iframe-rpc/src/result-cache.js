"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultCache = exports.DEFAULT_RESULT_CACHE_CAPACITY = void 0;
exports.DEFAULT_RESULT_CACHE_CAPACITY = 200;
const DEFAULT_PARAMETERS = {
    capacity: exports.DEFAULT_RESULT_CACHE_CAPACITY
};
class ResultCache {
    constructor(config) {
        // tslint:disable-next-line:no-any
        this.ids = [];
        // tslint:disable-next-line:no-any
        this.results = {};
        this.config = Object.assign({}, DEFAULT_PARAMETERS, config || {});
    }
    hasCachedResult(id) {
        // @ts-ignore
        return Object.prototype.hasOwnProperty.call(this.results, id);
        // return this.results.hasOwnProperty(id);
    }
    getCachedResult(id) {
        return this.results[id];
    }
    // tslint:disable-next-line:no-any
    setCachedResult(id, result) {
        if (this.hasCachedResult(id)) {
            this.ids = this.ids.filter(c => c !== id);
        }
        this.ids.unshift(id);
        this.results[id] = result;
        if (this.config.capacity >= 0) {
            this.enforceCapacity();
        }
    }
    enforceCapacity() {
        for (let size = this.ids.length; size > this.config.capacity; size--) {
            const id = this.ids.pop();
            const result = this.results[id];
            delete this.results[id];
            if (this.config.evictionCallback) {
                this.config.evictionCallback(id, result);
            }
        }
    }
}
exports.ResultCache = ResultCache;
//# sourceMappingURL=result-cache.js.map