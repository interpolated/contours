"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvocationError = void 0;
const is_error_1 = require("./is-error");
const mini_iframe_error_1 = require("./mini-iframe-error");
const makeMessage = (procedureName, cause, previousRejectReasons) => {
    let message = `Error invoking remote procedure '${procedureName}'.`;
    if ((0, is_error_1.isError)(cause)) {
        message += ` ${cause.name}: ${cause.message}.`;
    }
    else if (cause) {
        message += ` Reason: ${cause.toString()}`;
    }
    if (previousRejectReasons && previousRejectReasons.length > 0) {
        const plural = previousRejectReasons.length > 1 ? 's' : '';
        message += ` ${previousRejectReasons.length} additional rejection${plural} from retried attempt${plural}.`;
    }
    return message;
};
class InvocationError extends mini_iframe_error_1.MiniIframeError {
    // tslint:disable-next-line:no-any
    constructor(procedureName, cause, previousRejectReasons) {
        super(makeMessage(procedureName, cause, previousRejectReasons));
        this.name = InvocationError.name; // stack traces display correctly now
        this.procedureName = procedureName;
        this.cause = cause;
        this.previousRejectReasons = previousRejectReasons;
    }
}
exports.InvocationError = InvocationError;
//# sourceMappingURL=invocation-error.js.map